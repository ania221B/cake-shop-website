@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'breakpoints' as *;
@use 'functions' as *;

@mixin mq($breakpoint-1, $min-or-max: min-width, $breakpoint-2: 0em) {
  $check-1: check-size(
    $size: $breakpoint-1,
    $name: 'breakpoint-1',
  );
  @if (meta.type-of($check-1) == string) {
    @error $check-1;
  }

  $size-1: $check-1;
  @if ($min-or-max == min-width) {
    @media screen and (min-width: $size-1) {
      @content;
    }
  } @else if ($min-or-max == max-width) {
    @media screen and (max-width: $size-1) {
      @content;
    }
  } @else if ($min-or-max == between) {
    $check-2: check-size(
      $size: $breakpoint-2,
      $name: 'breakpoint-2',
    );
    @if (meta.type-of($check-2) == string) {
      @error $check-2;
    }

    $size-2: $check-2;
    @media screen and (min-width: $size-1) and (max-width: $size-2) {
      @content;
    }
  } @else {
    @error 'The value of #{$min-or-max} you provided for $min-or-max is invalid. Please use min-width, max-width or between';
  }
}

@mixin decoration(
  $type: before,
  $inset: 0 auto auto 50%,
  $transform: translateX(-50%),
  $width: 1rem,
  $height: 1rem,
  $bg-clr: clr(secondary, 700)
) {
  &::#{$type} {
    content: '';
    position: absolute;
    inset: $inset;
    transform: $transform;
    width: $width;
    height: $height;
    background-color: $bg-clr;
    @content;
  }
}
